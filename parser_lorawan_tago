/* This is an a generic payload parser for LoRaWAN. It will work for any network server.
 ** The code find the "payload" variable, sent by your sensor, and parse it if exists.
 ** The content of payload variable is always an Hexadecimal value.
 **
 ** Note: Additional variables can be created by the Network Server and sent directly to the bucket. Normally they aren't handled here.
 **
 ** Testing:
 ** You can do manual tests to the parse by using the Device Emulator. Copy and Paste the following JSON:
 ** [{ "variable": "data", "value": "0109611395" }]
 */

// Search the payload variable in the payload global variable. It's contents is always [ { variable, value...}, {variable, value...} ...]

const payload_raw = payload.find(
  (x) =>
    x.variable === "payload_raw" ||
    x.variable === "payload" ||
    x.variable === "data" 
);

const minus = '-';
//console.log(payload_raw.value);
console.log(payload_raw);

if (payload_raw) {
  try {
    // Convert the data from Hex to Javascript Buffer.
    const buffer = Buffer.from(payload_raw.value, "hex");
    
    let stringBuffer = buffer.toString('utf8');

    // Lets say you have a payload of 5 bytes.
    // 0 - Protocol Version
    // 1,2 - Temperature
    // 3,4 - Humidity
    // More information about buffers can be found here: https://nodejs.org/api/buffer.html
    const data = [
      { variable: "cont", 
        value: stringBuffer.substring(0,4),
        unit: "seq" 
      },
      {
        variable: "temperature",
        //value: buffer.readInt16BE(1),
        //value: parseInt(buffer.readInt8(2)),
        value: stringBuffer.substring(4,9),
        unit: "°C",
      },
      { variable: "humidity", 
        //value: buffer.readUInt16BE(3), 
        value: stringBuffer.substring(9,13),
        unit: "%" 
      },
      { variable: "luminosity", 
        value: stringBuffer.substring(13,18),
        unit: "lux" 
      },
      { variable: "noise", 
        value: stringBuffer.substring(18,23),
        unit: "dB" 
      },
      { variable: "eco2", 
        value: stringBuffer.substring(23,27),
        unit: "ppm" 
      },
      { variable: "etvoc", 
        value: stringBuffer.substring(27,31),
        unit: "ppb" 
      },
      { variable: "latitude", 
        value: minus.concat(stringBuffer.substring(31,40)),
        unit: "º" 
      },
      { variable: "longitude", 
        value: minus.concat(stringBuffer.substring(40,49)),
        unit: "º" 
      },
      { variable: "string", 
        value: stringBuffer,
        unit: "" },
    ];

    //console.log(buffer.readInt16BE(3));

    // This will concat the content sent by your device with the content generated in this payload parser.
    // It also add the field "group" and "time" to it, copying from your sensor data.
    payload = payload.concat(
      data.map((x) => ({
        ...x,
        group: String(payload_raw.serie || payload_raw.group),
        //time: String(payload_raw.time),
      }))
    );
  } catch (e) {
    // Print the error to the Live Inspector.
    console.error(e);

    // Return the variable parse_error for debugging.
    payload = [{ variable: "parse_error", value: e.message }];
  }
}



//'use strict';

//const valuesBase64 = payload.find(item => item.variable === 'frm_payload');
//console.log(valuesBase64);
//let buff = new Buffer(valuesBase64.value, 'base64');
//let valuesHex = buff.toString('hex');

//console.log(payload);

//console.log(longitude);

const latitude = payload.find(data => data.variable === "latitude"); // change to your latitude variable 
const longitude = payload.find(data => data.variable === "longitude"); // change to your longitude variable if (latitude && lo…
//const latitude = -Math.abs(latitudeI * -1)
console.log(latitude);
console.log(longitude);
//const menos = '-';
//latitude = -Math.abs(latitude)
//console.log(latitude);

payload.push

if (latitude && longitude) {
payload.push({
variable: "location",
location: { lat: Number(latitude.value), lng: Number(longitude.value) },
//value: ${latitude.value},${longitude.value},
//serie: latitude.serie,
//time: latitude.time
})
}
